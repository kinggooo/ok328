server.port=9090
logging.config=classpath:log4j2-test.xml
logging.level.org.springframework.data.mongodb=debug

#spring.data.mongodb.uri=mongodb://127.0.0.1:27017/test
spring.data.mongodb.uri=mongodb://test:nanzhi01!@148.70.47.196:27017/test

#redis配置
spring.redis.host=148.70.47.196
spring.redis.port=6379
spring.redis.password=test01!
spring.redis.pool.max-active=8

#缓存配置
spring.cache.type=Simple
#spring.cache.type=Redis

mybatis.mapper-locations=classpath:mapper/*.xml

public-key=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKgZ74NKf1fVFBpRpIUHAKKe1jhrM0pE+yfBINNkn13oTjraOcv+stYYwqmHJYcB0Hs1dRnv04NjHU7ksgGn5okCAwEAAQ==

#数据源配置
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/mysql?characterEncoding=utf-8&useSSL=false&useUnicode=true
spring.datasource.username=root
#spring.datasource.password=123456
spring.datasource.password=frTsSCR52voyWlK/XWxSv7B50k8VqRcmGiyLRCRIbDSp77FDIcTsTLNcgPf/HeZQx6EPZduZ57MUOiaLIcBKCw==
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource

## 初始化连接池的连接数量 大小，最小，最大
spring.datasource.druid.initialSize=5
spring.datasource.druid.minIdle=5
spring.datasource.druid.maxActive=20

## 配置获取连接等待超时的时间
spring.datasource.druid.maxWait=60000

# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.timeBetweenEvictionRunsMillis=60000

# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.druid.minEvictableIdleTimeMillis=300000
spring.datasource.druid.validationQuery=select 'x'
#mysql中为 select 'x'
#oracle中为 select 1 from dual
spring.datasource.druid.testWhileIdle=true
spring.datasource.druid.testOnBorrow=false
spring.datasource.druid.testOnReturn=false

# 是否缓存preparedStatement，也就是PSCache  官方建议MySQL下建议关闭   个人建议如果想用SQL防火墙 建议打开
spring.datasource.druid.poolPreparedStatements=true
spring.datasource.druid.maxPoolPreparedStatementPerConnectionSize=20

# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.druid.filters=config,stat,wall

# 通过connectProperties属性来打开mergeSql功能；慢SQL记录

#spring.datasource.druid.connect-properties=config.decrypt=true;config.decrypt.key=${public-key}
#spring.datasource.druid.connectProperties=config.decrypt=true;config.decrypt.key=${public-key}
spring.datasource.druid.connectionProperties=config.decrypt=true;config.decrypt.key=${public-key};druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
#spring.datasource.druid.filter.config.enabled=true
#spring.datasource.druid.config.enabled=true
#spring.datasource.druid.config.key=${public-key}

# ！！！请勿配置timeBetweenLogStatsMillis 会定时输出日志 并导致统计的sql清零
#spring.datasource.druid.timeBetweenLogStatsMillis=10000

# WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter
#是否启用StatFilter默认值true
#spring.datasource.druid.web-stat-filter.enabled=true
#spring.datasource.druid.web-stat-filter.url-pattern=
#spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*
#spring.datasource.druid.web-stat-filter.session-stat-enable=
#spring.datasource.druid.web-stat-filter.session-stat-max-count=
#spring.datasource.druid.web-stat-filter.principal-session-name=
#spring.datasource.druid.web-stat-filter.principal-cookie-name=
#spring.datasource.druid.web-stat-filter.profile-enable=

## StatViewServlet配置，说明请参考Druid Wiki，配置_StatViewServlet配置
#是否启用StatViewServlet默认值true
spring.datasource.druid.stat-view-servlet.enabled=true
spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*
#spring.datasource.druid.stat-view-servlet.reset-enable=false
#spring.datasource.druid.stat-view-servlet.login-username=admin
#spring.datasource.druid.stat-view-servlet.login-password=123456
#spring.datasource.druid.stat-view-servlet.allow=
#spring.datasource.druid.stat-view-servlet.deny=

#配置wall filter
#spring.datasource.druid.filter.wall.enabled=true
#spring.datasource.druid.filter.wall.db-type=mysql
#spring.datasource.druid.filter.wall.config.alter-table-allow=false
#spring.datasource.druid.filter.wall.config.truncate-allow=false
#spring.datasource.druid.filter.wall.config.drop-table-allow=false
##是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项就能够屏蔽DDL。
#spring.datasource.druid.filter.wall.config.none-base-statement-allow=false
##检查UPDATE语句是否无where条件，这是有风险的，但不是SQL注入类型的风险
#spring.datasource.druid.filter.wall.config.update-where-none-check=true
##SELECT ... INTO OUTFILE 是否允许，这个是mysql注入攻击的常见手段，缺省是禁止的
#spring.datasource.druid.filter.wall.config.select-into-outfile-allow=false
##是否允许调用Connection.getMetadata方法，这个方法调用会暴露数据库的表信息
#spring.datasource.druid.filter.wall.config.metadata-allow=true
##对被认为是攻击的SQL进行LOG.error输出
#spring.datasource.druid.filter.wall.log-violation=true
##对被认为是攻击的SQL抛出SQLExcepton
#spring.datasource.druid.filter.wall.throw-exception=true


# 配置日志输出
#spring.datasource.druid.filter.slf4j.enabled=true
#spring.datasource.druid.filter.slf4j.statement-create-after-log-enabled=false
#spring.datasource.druid.filter.slf4j.statement-close-after-log-enabled=false
#spring.datasource.druid.filter.slf4j.result-set-open-after-log-enabled=false
#spring.datasource.druid.filter.slf4j.result-set-close-after-log-enabled=false
#spring.datasource.druid.aop-patterns=com.company.project.service.*,com.company.project.dao.*,com.company.project.controller.*,com.company.project.mapper.*



